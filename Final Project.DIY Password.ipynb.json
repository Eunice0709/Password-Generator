{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "How many character you wish to have? 9\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'o64TY2*LN'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Setup - This imports some code as available characters for your password\n",
    "\n",
    "# This cell generates an original password after entering require length (Numbers ONLY)\n",
    "\n",
    "# Original password contains All letters (Uppercase and Lowercase), ALL numbers, and SOME punctuations\n",
    "\n",
    "import random\n",
    "\n",
    "uppers = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n",
    "lowers = 'abcdefghijklmnopqrstuvwxyz'\n",
    "digits = '0123456789'\n",
    "puncs = '!@#$%&*?'\n",
    "all_choice = uppers + lowers + digits + puncs\n",
    "password_len = int (input ('How many character you wish to have? '))\n",
    "\n",
    "def your_password (all_choice):\n",
    "    \n",
    "    password = ''\n",
    "    while len(password) < password_len:\n",
    "        password += random.choice(all_choice)\n",
    "    return password\n",
    "\n",
    "password = your_password(all_choice)\n",
    "password"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Do you prefer lower-case letters? Answer Yes or No. \n",
      "Yes\n",
      "Want upper-case letters? Answer Yes or No. \n",
      "No\n",
      "What about numbers? Answer Yes or No. \n",
      "Yes\n",
      "Lastly, special characters? Answer Yes or No. \n",
      "Yes\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'o6*h1$v4*'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## If you do not want the last one, this cell helps you to DIY elements of your password\n",
    "\n",
    "## You can decide whether you want Uppercase Letters, Lowercase Letter, Numbers and Some punctuations to exist\n",
    "\n",
    "##  Answer each question by Yes or No\n",
    "\n",
    "def diy_password():\n",
    "    \n",
    "    class CheckPassword():\n",
    "    \n",
    "        lower_check = input ('Do you prefer lower-case letters? Answer Yes or No. \\n')    \n",
    "        upper_check = input ('Want upper-case letters? Answer Yes or No. \\n')\n",
    "        digit_check = input ('What about numbers? Answer Yes or No. \\n')\n",
    "        punctuation_check = input ('Lastly, special characters? Answer Yes or No. \\n')\n",
    "\n",
    "    class LowerCheck(CheckPassword): \n",
    "    \n",
    "        def __init__(self):\n",
    "            super().__init__()\n",
    "            self.answer = str(CheckPassword().lower_check)\n",
    "            self.database = lowers\n",
    "    \n",
    "    class UpperCheck(CheckPassword):\n",
    "    \n",
    "        def __init__(self):\n",
    "            super().__init__()\n",
    "            self.answer = str(CheckPassword().upper_check)\n",
    "            self.database = uppers\n",
    "    \n",
    "    class DigitCheck(CheckPassword):\n",
    "    \n",
    "        def __init__(self):\n",
    "            super().__init__()\n",
    "            self.answer = str(CheckPassword().digit_check)\n",
    "            self.database = digits\n",
    "    \n",
    "    class PunctuationCheck(CheckPassword):\n",
    "    \n",
    "        def __init__(self):\n",
    "            super().__init__()\n",
    "            self.answer = str(CheckPassword().punctuation_check)\n",
    "            self.database = puncs\n",
    "\n",
    "    check_list = [LowerCheck(), UpperCheck(), DigitCheck(), PunctuationCheck()]\n",
    "    new_password = ''\n",
    "    new_check_list = []\n",
    "    \n",
    "    for item in check_list:\n",
    "        new_check_list.append(item)\n",
    "    \n",
    "    for item in check_list:\n",
    "        if item.answer == 'Yes':\n",
    "            for char in password:\n",
    "                if char not in item.database:\n",
    "                    new_password += ''\n",
    "                else:\n",
    "                    new_password += char\n",
    "                    new_check_list.remove(item)\n",
    "                    new_check_list.append(item)\n",
    "                    break\n",
    "        elif item.answer == 'No':\n",
    "            new_password += ''\n",
    "            new_check_list.remove(item)\n",
    "        else:\n",
    "            print(\"\\n\\Please enter Yes or No./ \\n\\n\\Let's try this again./\\n\")\n",
    "            return diy_password()\n",
    "    \n",
    "    while len(new_password) < password_len:\n",
    "        if new_check_list == []:\n",
    "            print('\\n\\Please review your requirements./\\n')\n",
    "            return diy_password()\n",
    "        else:\n",
    "            for item in new_check_list:\n",
    "                if item.answer == 'Yes' and len(new_password) < password_len:\n",
    "                    new_password += random.choice(item.database)\n",
    "                elif len(new_password) == password_len:\n",
    "                    break\n",
    "\n",
    "    return new_password\n",
    "\n",
    "new_password = diy_password()\n",
    "new_password"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Test cell for DIY password\n",
    "\n",
    "assert "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
